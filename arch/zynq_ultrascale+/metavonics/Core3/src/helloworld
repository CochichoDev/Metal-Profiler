/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_cache.h"
#include "xil_mmu.h"
#include "PMU.h"

//#define INTERNAL_DEBUG

#define PMSELR_MASK  0xFFFFFFE0
#define PMCR_MASK  0xFFFFFFC0

#define L2_LINE_SIZE 64
#define L2_N_SETS 1024
#define L2_WAYS 16

#define REPS 4

#define evt1 0x03
#define evt2 0x17
#define cpt1 0x01
#define cpt2 0x02

__attribute__((__section__(".ddr"))) __attribute__((__aligned__(1024*1024*2))) u8 block[L2_WAYS][L2_N_SETS][L2_LINE_SIZE];
__attribute__((__section__(".ddr"))) __attribute__((__aligned__(1024*1024*2))) u8 missed[2][REPS][L2_WAYS][L2_N_SETS];

int main()
{
	Xil_SetTlbAttributes((UINTPTR)missed,  NORM_NONCACHE);
	Xil_SetTlbAttributes((UINTPTR)0x00000000,  NORM_NONCACHE);
	Xil_SetTlbAttributes((UINTPTR)0x30000000,  NORM_NONCACHE);
	//Xil_SetTlbAttributes((UINTPTR)0x30200000,  NORM_NONCACHE);
	Xil_SetTlbAttributes((UINTPTR)0x30400000,  NORM_NONCACHE);
	Xil_ICacheDisable();
    init_platform();

    no_allocate_threshold_L2(0b11U);
    Xil_ConfigureL1Prefetch(0);

#if defined(INTERNAL_DEBUG)
    select_evt_counter(cpt1);
	event_track(evt1);
	enable_evt_counter(cpt1);
	select_evt_counter(cpt2);
	event_track(evt2);
	enable_evt_counter(cpt2);
#endif

	Xil_DCacheInvalidate();
	//Xil_L2CacheInvalidate();

	register u64 aux;
	register u64 event_ctr1, event_ctr2;

    for (register size_t rep = 0 ; rep < REPS ; rep++ ) {
		for (register size_t way_index = 0 ; way_index < L2_WAYS ; way_index++ ) {
			for (register size_t set_index = 0 ; set_index < L2_N_SETS ; set_index++ ) {
#if defined(INTERNAL_DEBUG)
				// Resets all counters
				__asm__ __volatile("MRS %0, PMCR_EL0"  : "=r" (aux));
				__asm__ __volatile("MSR PMCR_EL0, %0"  :: "r" ((aux & PMCR_MASK) | 0b111U));
#endif
				for (register size_t byte_stream_idx = 0 ; byte_stream_idx < L2_LINE_SIZE ; byte_stream_idx++ )
					block[way_index][set_index][byte_stream_idx] = byte_stream_idx;
#if defined(INTERNAL_DEBUG)
				// Select and read counter 1
				__asm__ __volatile("MRS %0, PMSELR_EL0" : "=r"(aux));
				__asm__ __volatile("MSR PMSELR_EL0, %0" :: "r"((aux & PMSELR_MASK) | 0X01));
				__asm__ __volatile("MRS %0,  PMXEVCNTR_EL0\t\n": "=r"(event_ctr1));
				// Select and read counter 2
				__asm__ __volatile("MSR PMSELR_EL0, %0" :: "r"((aux & PMSELR_MASK) | 0X02));
				__asm__ __volatile("MRS %0,  PMXEVCNTR_EL0\t\n": "=r"(event_ctr2));
#endif
				missed[0][rep][way_index][set_index] = event_ctr1;
				missed[1][rep][way_index][set_index] = event_ctr2;
			}
		}
    }
#if defined(INTERNAL_DEBUG)
    for (size_t rep_idx = 0 ; rep_idx < REPS ; rep_idx++ )
		for (size_t way_idx = 0 ; way_idx < L2_WAYS ; way_idx++ )
			for (size_t set_idx = 0 ; set_idx < L2_N_SETS ; set_idx++ )
					printf("Iter %d cache set %d of Way %d caused %d L1 cache misses and %d L2 cache misses\t%p\r\n", rep_idx, set_idx, way_idx, missed[0][rep_idx][way_idx][set_idx], missed[1][rep_idx][way_idx][set_idx],block+(way_idx*L2_N_SETS+set_idx)*L2_LINE_SIZE);
#endif
    cleanup_platform();
    return 0;
}
