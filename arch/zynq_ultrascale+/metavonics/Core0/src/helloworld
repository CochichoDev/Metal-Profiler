/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdint.h>
#include "platform.h"
#include "xil_cache.h"
#include "xil_printf.h"
#include "PMU.h"

 #include "general_include.h"
#include "pilier1_include.h"


#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_cache.h"
//#include "PMU.h"
#include "xtime_l.h"
#include "xil_mmu.h"
#include <time.h>
#include <errno.h>
#include <assert.h>
#include <math.h>

#include <unistd.h>


long tlong[TAILLE];

int msleep(unsigned int tms) {
	return usleep(tms * 1000);
}

static XTime XMt_CalcTime(XTime tCur) {
	XTime tEnd;
	XTime tDiff;
	XTime_GetTime(&tEnd);
	tDiff = tEnd - tCur;
	return tDiff;
}


static void enable_cycle_counter_el0(void) {
	uint64_t val;
	/* Disable cycle counter overflow interrupt */
	asm volatile("msr pmintenset_el1, %0" : : "r" ((uint64_t)(0 << 31)));
	/* Enable cycle counter */
	asm volatile("msr pmcntenset_el0, %0" :: "r" (1 << 31));
	/* Enable user-mode access to cycle counters. */
	asm volatile("msr pmuserenr_el0, %0" :: "r" ((1 << 0) | (1 << 2)));
	/* Clear cycle counter and start */
	asm volatile("mrs %0, pmcr_el0" : "=r" (val));
	val |= ((1 << 0) | (1 << 2));
	asm volatile("isb");
	asm volatile("msr pmcr_el0, %0" :: "r" (val));
	val = (1 << 27);
	asm volatile("msr pmccfiltr_el0, %0" :: "r" (val));
}

static inline uint64_t read_pmccntr(void) {
	uint64_t val;
	asm volatile("mrs %0, pmccntr_el0" : "=r"(val));
	return val;
}



long microbench_load_constant_size (long * tab, int lg, int stride, int mode )
{
    register long a = 0 ;
    register long * pti ;
    register int stride_reg = stride;
    register int lg_reg = lg;
    register long * tab_reg = tab;

	 XTime tCur1;
	 u64 end, begin;

   // Debut de la mesure
    if (mode != AGGRESSOR)   {

   	 XTime_GetTime(&tCur1);
        enable_cycle_counter_el0();
        begin= (u64) read_pmccntr();


    }

    for ( register int k = 0; k < stride_reg ; k++) {
        pti = tab_reg + k;
	for (  register int l = k ; l < lg_reg  ; l = l + stride_reg ) {
	  a += *pti ; pti += stride_reg;
        }
    }

    // Fin de la mesure
    if (mode != AGGRESSOR)  {

        end= (u64) read_pmccntr();
        XTime endTime = XMt_CalcTime(tCur1);
        printf("%d %lu %lu %f %d  \n\r", stride , end-begin, endTime, (end-begin)/ (10.0 * endTime), a);

    }



    *tab = a ;
    assert ( a == 0 );

    return a;
}

 int main()
{


	   init_platform();
	   Xil_ConfigureL1Prefetch(0x0U);

	   void XTime_StartTimer(void);



    	 long ret = 0;
	  int repeatCount = REPEAT*4;

	  // ----------------------------------------
	  //     Init
	  // ----------------------------------------
	  for (int j = 0; j < TAILLE; j++) tlong[j] = 0;

	  // ----------------------------------------
	  //    Affichage des paramètres
	  // ----------------------------------------
	  printf("# ------------------------------------------------------------\n");
	  printf("# Titre: microbench_load_constant_size \n");
	  printf("# Description: microbench de type load parcourant un tableau complet avec un stride qui varie\n");
	  printf("# Type de données: long  size: %ld bytes\n", sizeof(long));
	  printf("# Nombre de mesures: %d pour chaque valeur de stride \n", repeatCount);
	  printf("# Variation de stride : de 1 à %d avec un pas *2 \n", STRIDE_MAX);
	  printf("# Taille du tableau : %d entiers longs\n", TAILLE);
	  printf("# ------------------------------------------------------------\n");

	  // ----------------------------------------
	  // parcours LOAD  Iteration  constant
	  // ----------------------------------------
	  int repeat = 0;
	  for (int stride = 1; stride <= STRIDE_MAX; stride *= 2)
	  {
	    repeat = repeatCount ;
	    do
	    {
	      // boucle raz du cache
	     // printf("aaaaaaaaaaaa  %d %d  \n   \n",  stride,STRIDE_MAX  );
	      for (int j = 0; j < TAILLE; j++) tlong[j] = 0;

	      ret = microbench_load_constant_size ( tlong, TAILLE, stride, VICTIM );
	    } while (--repeat > 0);
	  } // end for stride

	  return ret;

}
